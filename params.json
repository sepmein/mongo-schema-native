{"name":"Mould.js","tagline":"A database level schema designer for using mongodb in nodejs.","body":"# Mould.js\r\n## Define Schema on Database level. \r\n[Document validation](https://docs.mongodb.org/v3.2/core/document-validation/) has been introduced to [MongoDb](http://mongodb.org) since version 3.2 . Before that, we could only define schema on application level.\r\n\r\n### Differences between Mould.js and Mongoose\r\n\r\nFeature      |Mongoose      | Mould.js\r\n:-----------:|:-----------: | :-------------:\r\nSchema Level |Application   | Database\r\nFeatures     |Full          | Minimal\r\n  \r\n### Get Started with Database Level Schema Validation\r\n>**Attention**: `mongodb` version >= 3.2 required\r\n\r\n1. Installation:\r\n\r\n    npm install mouldjs --save\r\n   \r\n2. Define Schema\r\n \r\n    let Schema = require('mouldjs')\r\n    let userSchema = new Schema({\r\n        name  : {$type: 'string', $exists: true},\r\n        age   : {$type: 'int', $lt: 200},\r\n        email : {$regex: \\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\\} \r\n        sex   : {$in: ['male','female','unknown']}\r\n    });\r\n\r\n>check full [schema lists](/#schema-lists).\r\n\r\n3. Apply\r\n\r\n    //with callback\r\n    userSchema.applyTo(db, collection, function(done){\r\n        if(done.ok) {...}\r\n    });\r\n    //with promise\r\n    userSchema.applyTo(db, collection).then(...);\r\n\r\n>[api docs](/#apis)\r\n***","google":"UA-71807007-1","note":"Don't delete this file! It's used internally to help with page regeneration."}