{"name":"Mould.js","tagline":"A database level schema designer for using mongodb in nodejs.","body":"# Mould.js\r\n## Define Schema on Database level.\r\n[Document validation](https://docs.mongodb.org/v3.2/core/document-validation/) has been introduced to [MongoDb](http://mongodb.org) since version 3.2 . Before that, we could only define schema on application level.\r\nWith Mould.js, we could define schema easily on database level, which means you could apply or modify the schema rule to collections as the bootstrap step of your application.\r\nAfter that, the validation is connection or application independent, the document will always be validated first whenever it is inserted or modified.\r\n\r\n### Differences between Mould.js and Mongoose\r\n\r\nFeature      |Mongoose      | Mould.js\r\n:-----------:|:-----------: | :-------------:\r\nSchema Level |Application   | Database\r\nFeatures     |Full          | Minimal\r\n\r\n### Get Started with Database Level Schema Validation\r\n>**Attention**: `mongodb` version >= 3.2 required\r\n\r\n- **Installation**\r\n```\r\nnpm install mouldjs --save\r\n```\r\n- **Define Schema**\r\n\r\n```javascript\r\nlet Mould = require('mouldjs')\r\nlet User = new Mould({\r\n    name  : {$type: 'string', $exists: true},\r\n    age   : {$type: 'int', $lt: 200},\r\n    email : {$regex: \\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\\}\r\n    sex   : {$in: ['male','female','unknown']}\r\n});\r\n```\r\n>check full [schema lists](/#schema-lists).\r\n\r\n- **Apply To Db**\r\n```javascript\r\n//with promise\r\nUser.applyTo(db, collection)\r\n    .then(...)\r\n    .catch(...);\r\n```\r\n>[api docs](/#apis)\r\n\r\n---\r\n### **Api**\r\n#### Class Mould Constructor\r\n#### .applyTo(db, collection)\r\nApply the `Mould` to specified collection of `db`. \r\n`db` is an instance of [node-mongodb-native-driver](http://mongodb.github.io/node-mongodb-native/) `Db` class.\r\nIf the collection is not found in the `db`, the method will create collection for you, then apply the mould.\r\nIf the collection is existed and already has some data, the method will success as well.\r\nBut later on, any data inserted will be tested against the Schema. \r\n\r\n*Parameters*:\r\n- db: The specified db you want to apply the `Mould`.\r\n-- type : should be an instance of [node-mongodb-native-driver](http://mongodb.github.io/node-mongodb-native/) `Db` class.\r\n- collection: The specified collection you want to apply `Mould`.\r\n-- type : could be a `String` which matches the collection name;\r\n          could also be a `collection` instance of [node-mongodb-native-driver](http://mongodb.github.io/node-mongodb-native/)\r\n\r\n*Return*:\r\n\r\nReturn a `Promise` contains information which indicates whether the application is succeeded or failed.\r\n- type: Promise\r\n-- resolve: {ok:1} if success\r\n-- reject: error\r\n\r\n###### example\r\n\r\n#### .setValidationLevel\r\n#### .setValidationAction\r\n#### static checkCollectionExists\r\n#### static getCollectionValidator\r\n#### static isMongoVersionSupport\r\n### Examples\r\nCheck the examples folder\r\n### Types\r\nTypes: https://docs.mongodb.org/v3.2/reference/operator/query/type/#document-type-available-types\r\n### Validators\r\nValidator: https://docs.mongodb.org/v3.2/core/document-validation/\r\n\r\n---\r\nTODO\r\n- add validator","google":"UA-71807007-1","note":"Don't delete this file! It's used internally to help with page regeneration."}